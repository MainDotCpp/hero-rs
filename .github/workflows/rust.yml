name: Rust CI

on:
  push:
    branches: [ "main", "master" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1  # 添加此环境变量以获取更详细的错误信息

jobs:
  check:
    name: 检查代码
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 安装最新的稳定版Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy, rustfmt  # 添加 clippy 和 rustfmt 组件
      
      # 添加格式检查
      - name: 检查代码格式
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      
      # 添加 clippy 检查
      - name: Clippy 检查
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build:
    name: 构建和测试
    runs-on: ${{ matrix.os }}
    needs: [check]  # 确保检查通过后再构建
    strategy:
      matrix:
        os: [windows-latest]  # 仅在Windows平台上构建和测试
        rust: [stable]
    steps:
      - uses: actions/checkout@v3
      
      - name: 安装Rust工具链
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      
      # 添加缓存以加速构建
      - name: 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: 构建项目
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose  # 添加 verbose 获取更多日志信息
      
      # 添加测试步骤
      - name: 运行测试
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

  release:
    name: 创建发布版本
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest  # 修改为在Windows上发布
    steps:
      - uses: actions/checkout@v3
      
      - name: 安装Rust工具链
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: 构建发布版本
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose
      
      - name: 获取执行文件名称
        id: get_binary_name
        run: |
          $binaryName = Get-ChildItem -Path target/release -Filter "*.exe" | Select-Object -First 1 -ExpandProperty Name
          echo "BINARY_NAME=$binaryName" | Out-File -FilePath $env:GITHUB_ENV -Append
      
      - name: 创建发布包
        run: |
          mkdir -p release
          Copy-Item "target/release/${{ env.BINARY_NAME }}" -Destination "release/"
          Copy-Item "README.md" -Destination "release/" -ErrorAction SilentlyContinue
          Compress-Archive -Path "release/*" -DestinationPath "hero-rs-windows.zip"
      
      - name: 发布到GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: hero-rs-windows.zip
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 